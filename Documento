2. Título + subtítulo explicativo.
Título: DataChat
Subtítulo explicativo: Tu base de datos, ahora conversa contigo. Pregunta en lenguaje natural y obtén información al instante.

3. NATURALEZA DEL PROYECTO Y ÁREA DE DESARROLLO
DataChat es un proyecto que estoy desarrollando como parte de mi formación y crecimiento en el área de desarrollo de software. Se enfoca en la automatización de consultas SQL usando lenguaje natural, lo que lo hace útil para empresas y personas que trabajan con bases de datos, pero sin conocimientos avanzados en SQL.

4. DEFINICIÓN
DataChat es una aplicación web que permite a cualquier usuario consultar su base de datos con preguntas en lenguaje natural, sin necesidad de escribir código SQL. Está pensada principalmente para empresas y profesionales que manejan bases de datos, pero no tienen conocimientos técnicos. Para su desarrollo, voy a usar Django en el backend y Angular en el frontend, además de integrar modelos de IA que traduzcan el lenguaje natural a SQL. El objetivo principal es facilitar la consulta de datos y mejorar la eficiencia en la toma de decisiones.

5. SELECCIÓN DE ANTECEDENTES Y CONCLUSIONES
Algunas herramientas como los chatbots empresariales y plataformas de Business Intelligence han explorado la generación automática de consultas SQL, pero suelen ser complicadas de configurar o no muy intuitivas. DataChat se diferencia al centrarse en la simplicidad y accesibilidad, ofreciendo una solución más fácil de usar y sin requerir conocimientos previos en SQL.

6. SELECCIÓN DE REFERENTES Y CONCLUSIONES

GPT-4 y Groq: Modelos de IA que permiten procesar lenguaje natural y convertirlo en consultas SQL de manera precisa.
Paginas web como la de Chatgpt y Copilot.
La inspiración principal viene de la inteligencia artificial aplicada a bases de datos y la facilidad de uso de herramientas de análisis, combinando ambos conceptos para hacer que consultar información sea rápido y accesible.

7. Aspectos técnicos.
Backend:
Django para gestionar el servidor y la lógica del negocio.
MySQL como base de datos relacional.
Django REST Framework para construir la API.
Groq para convertir preguntas en lenguaje natural a SQL.

Frontend:
Angular como framework principal para la interfaz de usuario.

Despliegue:
Docker para contenerizar la aplicación y facilitar su ejecución en distintos entornos.
GitHub para la integración y entrega continua (CI/CD).

8. Temporalización (Diagrama de Gantt).
Semana 1-2: Investigación y análisis de requisitos.
Semana 3-4: Desarrollo de la infraestructura básica (conexión a bases de datos, configuración del entorno).
Semana 5-7: Implementación del procesamiento de lenguaje natural (entrenamiento de modelos, pruebas).
Semana 8-9: Integración del sistema de generación de consultas SQL a partir de lenguaje natural.
Semana 10-11: Desarrollo de la interfaz de usuario.
Semana 12: Pruebas y ajuste final del sistema.
Semana 13: Preparación de documentación y presentación final.

9. Viabilidad presupuestaria.
Nº de sesiones de trabajo: Aproximadamente 12 semanas con trabajo diario.
Costes estimados:
API deGroq: Coste gratuito.
Teniendo en cuenta lo que cobra un desarrollador que acaba de empezar, unos 300€ por semana.
Lo que seria un total de 3600€.
Equipos y herramientas: Los costos se calcularán en función del tiempo de uso y la vida útil del hardware y software necesario.
